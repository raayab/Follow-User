{"version":3,"sources":["components/User.js","components/UsersList.js","Database/urls.js","components/UserPage.js","components/LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["User","props","changeFollowStatus","e","handleFollowStatus","id","followStatus","setState","state","bind","this","className","name","groupName","numOfFollowers","onClick","onMouseEnter","onMouseOver","onMouseLeave","onMouseOut","Component","UsersList","users","user","axios","post","loggedInUser","then","res","getUsersRows","catch","err","alert","get","params","p","data","map","user_name","user_id","group_name","followers","follow_status","UserPage","loggedInUserName","LoginPage","value","target","saveUser","onSubmit","handleSubmit","placeholder","type","onChange","handleValue","App","localStorage","getItem","userId","setItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b636ee12.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass User extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            followStatus:this.props.followStatus\r\n        };\r\n        this.changeFollowStatus = this.changeFollowStatus.bind(this);\r\n        \r\n    }\r\n    onMouseOver(e) {\r\n        this.setState({followStatus:'Unfollow'});\r\n    }\r\n    onMouseOut(e) {\r\n        this.setState({followStatus:this.props.followStatus});\r\n    }\r\n    changeFollowStatus = (e) => {\r\n        this.props.handleFollowStatus(this.props.id,this.props.followStatus);\r\n        this.setState({followStatus: this.state.followStatus===\"Follow\" ? 'Unfollow' : 'Follow'}) ;\r\n\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <tr className=\"table_row\">\r\n                <td className=\"item\">{this.props.name}</td>\r\n                <td className=\"item\">{this.props.groupName}</td>\r\n                <td className=\"item\">{this.props.numOfFollowers? this.props.numOfFollowers : 0}</td>\r\n                <td className=\"item\"> \r\n                    <button className={this.state.followStatus} onClick={this.changeFollowStatus}\r\n                            onMouseEnter={this.state.followStatus==='Following'?this.onMouseOver.bind(this):()=>{}}\r\n                            onMouseLeave={this.state.followStatus==='Unfollow'?this.onMouseOut.bind(this):()=>{}}>\r\n                    <span>\r\n                       {this.state.followStatus}\r\n                    </span>\r\n                    </button>\r\n                    </td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","import React,{Component} from 'react';\r\nimport User from './User';\r\nimport axios from 'axios';\r\nimport {URL_FOLLOWINGS} from '../Database/urls';\r\nimport {URL_GET_USERS} from '../Database/urls';\r\n\r\nclass UsersList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            users:[],\r\n            followStatus:''\r\n        }\r\n        this.handleFollowStatus = this.handleFollowStatus.bind(this);\r\n    }\r\n   \r\n    handleFollowStatus(user,followStatus) {\r\n        axios.post(URL_FOLLOWINGS,{\r\n            loggedInUser: this.props.loggedInUser,\r\n            user:user,\r\n            followStatus:followStatus})\r\n            .then(res=>{this.getUsersRows()})\r\n            .catch(err=>{\r\n                alert(\"request to follow/unfollow Failed\");\r\n          });\r\n          \r\n    }\r\n\r\n    getUsersRows() {\r\n        axios.get(URL_GET_USERS, {\r\n                params: {\r\n                    loggedInUser:this.props.loggedInUser\r\n                }\r\n            })\r\n            .then(p=>this.setState({users:p.data}));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUsersRows();\r\n    }\r\n\r\n    render() {\r\n        let users = this.state.users.map(user=>(<User name={user.user_name}\r\n                                                        id={user.user_id}\r\n                                                        groupName={user.group_name}\r\n                                                        numOfFollowers={user.followers}\r\n                                                        followStatus={user.follow_status}\r\n                                                        handleFollowStatus={this.handleFollowStatus}\r\n                                                        />)) \r\n        return (\r\n            <div>\r\n                <table className=\"users_list\">\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Group Name</th> \r\n                    <th>Number of followers</th>\r\n                    <th></th>\r\n                </tr>\r\n                    {users}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default UsersList;","\r\nexport const URL_FOLLOWINGS = 'http://localhost:4000/following';\r\nexport const URL_GET_USERS = 'http://localhost:4000/userRow';\r\nexport const URL_GET_USER_NAME = 'http://localhost:4000/userId';","import React,{Component} from 'react';\r\nimport UsersList from './UsersList';\r\nimport axios from 'axios';\r\nimport {URL_GET_USER_NAME} from '../Database/urls';\r\n\r\nclass UserPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            loggedInUserName:''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        axios.get(URL_GET_USER_NAME, {\r\n                params: {\r\n                    loggedInUser:this.props.loggedInUser\r\n                }\r\n            })\r\n            .then(p=>p.data[0])\r\n            .then(p=>this.setState({loggedInUserName:p.name}));\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"UserPage\">\r\n                {this.state.loggedInUserName ? (\r\n                    <div>\r\n                        <h1 className=\"row\">Welcome {this.state.loggedInUserName} </h1>\r\n                        <div className=\"row\">Choose users to follow:</div>\r\n                        <UsersList loggedInUser={this.props.loggedInUser}  />\r\n                    </div>\r\n                    ) : (\r\n                        <div> Loading... </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserPage;","import React,{Component} from 'react';\r\n\r\nclass LoginPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value:''\r\n        };\r\n    }\r\n\r\n    handleValue(e) {\r\n        this.setState({value:e.target.value});\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        this.props.saveUser(this.state.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"LoginPage\">\r\n                        <div className=\"row\">Must be signed in</div>\r\n                        <form onSubmit={(e)=>this.handleSubmit(e)}>\r\n                            <label>\r\n                            <input placeholder=\"User ID\" value={this.state.value} type=\"text\" onChange={(e)=>this.handleValue(e)} />\r\n                            </label>\r\n                            <input type=\"submit\" value=\"Sign in\" />\r\n                        </form>  \r\n            </div>\r\n        );       \r\n    }\r\n}\r\n\r\nexport default LoginPage;","import React,{Component} from 'react';\nimport './App.css';\nimport UserPage from './components/UserPage';\nimport LoginPage from './components/LoginPage';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedInUser:localStorage.getItem(\"loggedInUser\")\n    }\n    this.saveUser = this.saveUser.bind(this);\n  }\n\n  saveUser(userId) {\n      localStorage.setItem(\"loggedInUser\",userId);\n      this.setState({loggedInUser:userId});\n  }\n\n  render() {\n    return ( \n      <div>\n        {!this.state.loggedInUser ? (\n          <LoginPage saveUser={this.saveUser}/>\n          ) : (\n          <UserPage loggedInUser={this.state.loggedInUser}/> \n          )\n        }\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}